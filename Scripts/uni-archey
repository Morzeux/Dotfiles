#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Archey [version 0.6.0a]
#
# Archey is a simple system information tool written in Python.
#
# Copyright 2010 Melik Manukyan <melik@archlinux.us>
# Copyright 2010 David Vazgenovich Shakaryan <dvshakaryan@gmail.com>
# Copyright 2015 Štefan "Morzeux" Šmihla <morzeux@gmail.com>
#
# ASCII art by Brett Bohnenkamper <kittykatt@silverirc.com>
# Changes Jerome Launay <jerome@projet-libre.org>
# Fedora support by YeOK <yeok@henpen.org>
#
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.

# Import libraries

import os
import platform
import sys
import subprocess
import re
from subprocess import Popen, PIPE
from getpass import getuser
from collections import OrderedDict
from datetime import datetime, timedelta

ENCODING = sys.getdefaultencoding()
LINESEP = os.linesep

# Python 3 compatibility
if sys.version_info >= (3, 0):
    unicode = str


class DistroInfo(object):

    __color_dict__ = {
        'Ubuntu': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[0;33m'],
        'Debian': ['\x1b[0;31m', '\x1b[1;31m'],
        'Mint': ['\x1b[0;32m', '\x1b[1;37m'],
        'Crunchbang': ['\x1b[1;37m'],
        'Fedora': ['\x1b[0;34m', '\x1b[1;37m'],
        'Sensors': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'],
        'Clear': ['\x1b[0m']
    }

    __desktop_env_map__ = {
        'cinnamon-sessio': 'Cinnamon',
        'gnome-session': 'GNOME',
        'mate-session': 'MATE',
        'ksmserver': 'KDE',
        'xfce4-session': 'Xfce',
        'lxsession': 'LXDE'
    }

    __window_manager_map__ = {
        'awesome': 'Awesome',
        'beryl': 'Beryl',
        'blackbox': 'Blackbox',
        'bspwm': 'bspwm',
        'compiz': 'Compiz',
        'dwm': 'DWM',
        'enlightenment': 'Enlightenment',
        'herbstluftwm': 'herbstluftwm',
        'fluxbox': 'Fluxbox',
        'fvwm': 'FVWM',
        'i3': 'i3',
        'icewm': 'IceWM',
        'kwin': 'KWin',
        'metacity': 'Metacity',
        'musca': 'Musca',
        'nemo': 'Nemo',
        'openbox': 'Openbox',
        'pekwm': 'PekWM',
        'ratpoison': 'ratpoison',
        'scrotwm': 'ScrotWM',
        'wmaker': 'Window Maker',
        'wmfs': 'Wmfs',
        'wmii': 'wmii',
        'xfwm4': 'Xfwm',
        'xmonad': 'xmonad',

        'dwm.exe': 'Desktop Window Manager',
        'explorer.exe': 'Windows Explorer'
    }

    __output_order__ = OrderedDict([
        ('user', 'User'),
        ('hostname', 'Hostname'),
        ('distro', 'Distro'),
        ('kernel', 'Kernel'),
        ('uptime', 'Uptime'),
        ('window_manager', 'Window Manager'),
        ('desktop_environment', 'Desktop Environment'),
        ('shell', 'Shell'),
        ('terminal', 'Terminal'),
        ('packages', 'Packages'),
        ('cpu', 'CPU'),
        ('ram', 'RAM'),
        ('disk', 'Disk')
    ])

    def format_output(self):
        results = []
        results.extend([''] * (self._logo_lines_count - len(self.__output_order__)))

        for prop, key in self.__output_order__.items():
            value = getattr(self, prop)

            results.append('%s%s: %s%s' % (
                self.colors[-1],
                key,
                self.__color_dict__['Clear'][0],
                value
            ))

        return self.logo.format(color=self.colors, results=results)

    def _format_usage_output(self, used, total, unit):
        used = int(used)
        total = int(total)
        if total == 0:
            used_percent = 100
        else:
            used_percent = (float(used) / float(total)) * 100

        if used_percent <= 33:
            usage = '%s%s%s %s/ %s%s' % (self.__color_dict__['Sensors'][1], used, unit, self.__color_dict__['Clear'][0], total, unit)

        if 33 < used_percent < 67:
            usage = '%s%s%s %s/ %s%s' % (self.__color_dict__['Sensors'][2], used, unit, self.__color_dict__['Clear'][0], total, unit)

        if used_percent >= 67:
            usage = '%s%s%s %s/ %s%s' % (self.__color_dict__['Sensors'][0], used, unit, self.__color_dict__['Clear'][0], total, unit)

        return usage

    @property
    def _logo_lines_count(self):
        return len(self.logo.strip().split('\n')) - 2

    @staticmethod
    def process(command):
        return Popen(command, stdout=PIPE, stderr=PIPE, shell=True).communicate()[0].decode(ENCODING, 'ignore')

    @property
    def logo(self):
        raise NotImplementedError()

    @property
    def colors(self):
        raise NotImplementedError()

    @property
    def user(self):
        return getuser()

    @property
    def hostname(self):
        return platform.node()

    @property
    def distro(self):
        raise NotImplementedError()

    @property
    def kernel(self):
        raise NotImplementedError()

    @property
    def uptime(self):
        raise NotImplementedError()

    @property
    def window_manager(self):
        raise NotImplementedError()

    @property
    def desktop_environment(self):
        raise NotImplementedError()

    @property
    def shell(self):
        raise NotImplementedError()

    @property
    def terminal(self):
        raise NotImplementedError()

    @property
    def packages(self):
        raise NotImplementedError()

    @property
    def cpu(self):
        raise NotImplementedError()

    @property
    def ram(self):
        raise NotImplementedError()

    @property
    def disk(self):
        raise NotImplementedError()


class UnixDistroInfo(DistroInfo):

    def __init__(self, fullname, package_list_cmd, colors, logo):
        self._fullname = fullname
        self._package_list_cmd = package_list_cmd
        self._colors = colors
        self._logo = logo
        self._sys_encoding = sys.getdefaultencoding()
        self._process_list = None

    @property
    def process_list(self):
        if self._process_list is None:
            self._process_list = set(unicode(subprocess.check_output(
                ['ps', '-u', getuser(), '-o', 'comm']
            ), encoding='utf8').rstrip(LINESEP).split(LINESEP))
        return self._process_list

    @property
    def logo(self):
        return self._logo

    @property
    def colors(self):
        return self._colors

    @property
    def distro(self):
        return self._fullname

    @property
    def kernel(self):
        return self.process('uname -r').rstrip(LINESEP)

    @property
    def uptime(self):
        with open('/proc/uptime') as fr:
            f_up_time = int(fr.read().split('.')[0])

        day = int(f_up_time / 86400)
        f_up_time %= 86400
        hour = int(f_up_time / 3600)
        f_up_time %= 3600
        minute = int(f_up_time / 60)
        up_time = ''
        if day == 1:
            up_time += '%d day, ' % day
        if day > 1:
            up_time += '%d days, ' % day
        up_time += '%d:%02d' % (hour, minute)
        return up_time

    @property
    def window_manager(self):
        window_manager = ''
        for key in self.__window_manager_map__.keys():
            if key in self.process_list:
                window_manager = self.__window_manager_map__[key]
                break

        return window_manager

    @property
    def desktop_environment(self):
        desktop_env = ''
        for key in self.__desktop_env_map__.keys():
            if key in self.process_list:
                desktop_env = self.__desktop_env_map__[key]
                break

        return desktop_env

    @property
    def shell(self):
        return os.getenv('SHELL')

    @property
    def terminal(self):
        return os.getenv('TERM')

    @property
    def packages(self):
        if self._package_list_cmd is not None:
            p1 = self.process(self._package_list_cmd)
            packages = len(p1.rstrip(LINESEP).split(LINESEP))
        else:
            packages = 'Unknown'

        return packages

    @property
    def cpu(self):
        with open('/proc/cpuinfo') as fr:
            file = fr.readlines()
        return re.sub('  +', ' ', file[4].replace('model name', '').strip().lstrip(':').strip())

    @property
    def ram(self):
        raminfo = self.process('free -m').split(LINESEP)
        ram = ''.join(filter(re.compile('M').search, raminfo)).split()
        used = ram[2]
        total = ram[1]

        return self._format_usage_output(used, total, 'MB')

    @property
    def shell(self):
        return os.getenv('SHELL')

    @property
    def terminal(self):
        return os.getenv('TERM')

    @property
    def disk(self):
        process_result = self.process("""
            df -Tlh -B GB --total
            -t ext4
            -t ext3
            -t ext2
            -t reiserfs
            -t jfs
            -t ntfs
            -t fat32
            -t btrfs
            -t fuseblk
            -t xfs
        """)

        total = process_result.splitlines()[-1].split()
        used = re.match(r'(\d+).*', total[3]).groups()[0]
        size = re.match(r'(\d+).*', total[2]).groups()[0]

        return self._format_usage_output(used, size, 'GB')


class AndroidDistroInfo(UnixDistroInfo):

    @property
    def process_list(self):
        return set()

    @property
    def shell(self):
        return 'bash'

    @property
    def terminal(self):
        return 'Termux'

    @property
    def disk(self):
        process_result = self.process('df /storage/MicroSD /data')

        used = 0
        size = 0
        for row in process_result.splitlines()[1:]:
            total = row.split()
            used += int(re.match(r'(\d+).*', total[2]).groups()[0])
            size += int(re.match(r'(\d+).*', total[1]).groups()[0])

        return self._format_usage_output(used, size, 'GB')


class MacDistroInfo(UnixDistroInfo):

    UPTIME_RGX = re.compile(r'.+up\s+(.+?),.+')

    @property
    def distro(self):
        return '%s %s' % (self._fullname, platform.mac_ver()[0])

    @property
    def kernel(self):
        value = '%s %s' % (sys.platform, super(MacDistroInfo, self).kernel)
        return value[0].upper() + value[1:]

    @property
    def desktop_environment(self):
        return 'Aqua'

    @property
    def window_manager(self):
        return 'Quartz Compositor'

    @property
    def terminal(self):
        return 'Terminal'

    @property
    def uptime(self):
        return self.UPTIME_RGX.match(self.process('uptime').strip()).groups()[0]

    @property
    def cpu(self):
        return self.process('sysctl -n machdep.cpu.brand_string').strip()

    @property
    def ram(self):
        total_mem = int(self.process('sysctl -n hw.memsize').strip()) / 1024 / 1024
        wired_mem = int(self.process("vm_stat | grep wired | awk '{ print $4 }' | sed 's/\.//'").strip())
        active_mem = int(self.process("vm_stat | grep ' active' | awk '{ print $3 }' | sed 's/\.//'").strip())
        compressed_mem = int(self.process("vm_stat | grep occupied | awk '{ print $5 }' | sed 's/\.//'").strip())
        
        used_mem = (wired_mem + active_mem + compressed_mem) * 4 / 1024
        return self._format_usage_output(used_mem, total_mem, 'MB')

    @property
    def disk(self):
        process_result = self.process('df -H /')

        total = process_result.splitlines()[-1].split()
        used = re.match(r'(\d+).*', total[2]).groups()[0]
        size = re.match(r'(\d+).*', total[1]).groups()[0]

        return self._format_usage_output(used, size, 'GB')


class WindowsDistroInfo(UnixDistroInfo):

    FOREGROUND_BLUE = 0x0001

    __color_dict__ = {
        'Sensors': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'],
        'Clear': ['\x1b[0m']
    }

    __shells__ = {
        'bash.exe': 'Bash',
        'cmd.exe': 'Command Prompt',
        'powershell.exe': 'Windows PowerShell'
    }

    def __init__(self, package_list_cmd, colors, logo):
        self._package_list_cmd = package_list_cmd
        self._colors = colors
        self._logo = logo
        if not self.is_cygwin:
            self.__color_dict__ = {
                'Sensors': ['', '', ''],
                'Clear': ['']
            }
            self._colors = list('' for _ in self._colors)
        else:
            self._logo += '\x1b[0m'

        self._process_list = None

    @property
    def process_list(self):
        if self._process_list is None:
            processes = self.process('tasklist').strip().splitlines()[4:]
            self._process_list = set(x.split(' ')[0].strip().lower() for x in processes)
        return self._process_list

    def _wmic_process(self, command):
        return self.process(command).strip().splitlines()[-1].strip()

    @property
    def logo(self):
        return self._logo

    @property
    def colors(self):
        return self._colors

    @property
    def distro(self):
        return self._wmic_process('wmic os get caption')

    @property
    def kernel(self):
        if self.is_cygwin:
            kernel = self.process('uname -sr')
        else:
            kernel = '%s %s' % (os.getenv('OS'), self._wmic_process('wmic os get version'))

        return kernel.strip()

    @property
    def uptime(self):
        if self.is_cygwin:
            return super(WindowsDistroInfo, self).uptime

        value = self.process('net stats workstation').strip()
        value = list(x.strip() for x in value.splitlines() if x.strip())[1]
        value = re.match(r'.+?(\d\d\..+)', value).groups()[0]
        value = datetime.strptime(value.replace(' ', ''), '%d.%m.%Y%H:%M:%S')
        diff = (datetime.now() - value).seconds
        return str(timedelta(seconds=diff))[:-3]

    @property
    def window_manager(self):
        for window_manager in ['dwm.exe']:
            if window_manager in self.process_list:
                break
        else:
            window_manager = 'explorer.exe'

        return self.__window_manager_map__[window_manager]

    @property
    def desktop_environment(self):
        number = int(re.match(r'(\d+)\..+', self._wmic_process('wmic os get version')).groups()[0])
        return {
            5: 'Luna',
            6: 'Aero',
            10: 'Aero'
        }.get(number, '')

    @property
    def shell(self):
        if self.is_cygwin:
            return super(WindowsDistroInfo, self).shell

        for shell in ['powershell.exe', 'cmd.exe']:
            if shell in self._process_list:
                break
        else:
            shell = ''

        return self.__shells__.get(shell, '')

    @property
    def terminal(self):
        if self.is_cygwin:
            return 'Cygwin Terminal'
        else:
            for shell in ['powershell.exe', 'cmd.exe']:
                if shell in self.process_list:
                    break
            else:
                shell = ''

        return self.__shells__.get(shell, '')

    @property
    def packages(self):
        counter = 0
        ppgs1_rgx = re.compile(r'\d+ packages installed.')
        ppgs2_rgx = re.compile(r'\d+ applications not managed with Chocolatey.')
        for line in self.process(self._package_list_cmd).splitlines():
            line = line.strip()
            if not line or ppgs1_rgx.match(line) or ppgs2_rgx.match(line):
                continue
            counter += 1

        return str(counter)

    @property
    def cpu(self):
        if self.is_cygwin:
            return super(WindowsDistroInfo, self).cpu

        return self._wmic_process('wmic cpu get name')

    @property
    def ram(self):
        memory_total = int(self._wmic_process('wmic os get totalvisiblememorysize'))
        used_memory = memory_total - int(self._wmic_process('wmic os get freephysicalmemory'))

        used_memory /= 1000
        memory_total /= 1000

        return self._format_usage_output(used_memory, memory_total, 'MB')

    @property
    def disk(self):
        if self.is_cygwin:
            return super(WindowsDistroInfo, self).disk

        disk_spaces = self.process('wmic logicaldisk get freespace, size').strip().splitlines()[1:]
        disk_spaces = [line.strip() for line in disk_spaces if line.strip()]
        disk_rgx = re.compile(r'(\d+)\s+(\d+)')
        disk_spaces = [disk_rgx.match(line).groups() for line in disk_spaces]
        free_space = 0
        space_total = 0
        for free, total in disk_spaces:
            free_space += int(free)
            space_total += int(total)
        used_space = (space_total - free_space) / 1000000000
        space_total /= 1000000000

        return self._format_usage_output(used_space, space_total, 'GB')

    @property
    def is_cygwin(self):
        return sys.platform.lower().startswith('cygwin')


DISTROS = {
    'windows': WindowsDistroInfo(
        package_list_cmd='choco list -li',
        colors=['\x1b[1;0m', '\x1b[1;34m'],
        logo="""{color[0]}
{color[0]}                      ,,,:::   {results[0]}
{color[0]}                ,,,:::::::::   {results[1]}
{color[0]}         ,,,::: ::::::::::::   {results[2]}
{color[0]}   ,,,::::::::: ::::::::::::   {results[3]}
{color[0]}   :::::::::::: ::::::::::::   {results[4]}
{color[0]}   :::::::::::: ::::::::::::   {results[5]}
{color[0]}   ............ ............   {results[6]}
{color[0]}   :::::::::::: ::::::::::::   {results[7]}
{color[0]}   :::::::::::: ::::::::::::   {results[8]}
{color[0]}   '''::::::::: ::::::::::::   {results[9]}
{color[0]}         '''::: ::::::::::::   {results[10]}
{color[0]}                ''':::::::::   {results[11]}
{color[0]}                      ''':::   {results[12]}
"""
    ),
    'arch': UnixDistroInfo(
        fullname='Arch Linux',
        package_list_cmd='pacman -Q',
        colors=['\x1b[0;34m', '\x1b[1;34m'],
        logo="""{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`     {results[13]}
{color[0]}   ######'           '######    {results[14]}
{color[0]}  ;####                 ####;   {results[15]}
{color[0]}  ##'                     '##   {results[16]}
{color[0]} #'                         `#  {results[17]}
\x1b[0m""".strip()
    ),
    'gentoo': UnixDistroInfo(
        fullname='Gentoo Linux',
        package_list_cmd='ls -d /var/db/pkg/*/*| cut -f5- -d/',
        colors=['\x1b[1;37m', '\x1b[1;35m'],
        logo="""{color[1]}
{color[1]}           -/oyddmdhs+:.              {results[0]}
{color[1]}       -o{color[0]}dNMMMMMMMMNNmhy+{color[1]}-\`               {results[1]}
{color[1]}     -y{color[0]}NMMMMMMMMMMMNNNmmdhy{color[1]}+-             {results[2]}
{color[1]}   \`o{color[0]}mMMMMMMMMMMMMNmdmmmmddhhy{color[1]}/\`          {results[3]}
{color[1]}   om{color[0]}MMMMMMMMMMMN{color[1]}oooooo{color[0]}hmdddhhhd{color[1]}o\`      {results[4]}
{color[1]}  .y{color[0]}dMMMMMMMMMMd{color[1]}ooommooo{color[0]}mdddhhhhdm{color[1]}+\`    {results[5]}
{color[1]}   oy{color[0]}hdmNMMMMMMMN{color[1]}ooooo{color[0]}dmddddhhhhyhN{color[1]}d.    {results[6]}
{color[1]}    :o{color[0]}yhhdNNMMMMMMMNNNmmdddhhhhhyym{color[1]}Mh    {results[7]}
{color[1]}      .:{color[0]}+sydNMMMMMNNNmmmdddhhhhhhmM{color[1]}my    {results[8]}
{color[1]}         /m{color[0]}MMMMMMNNNmmmdddhhhhhmMNh{color[1]}s:    {results[9]}
{color[1]}      \`o{color[0]}NMMMMMMMNNNmmmddddhhdmMNhs{color[1]}+\`   {results[10]}
{color[1]}    \`s{color[0]}NMMMMMMMMNNNmmmdddddmNMmhs{color[1]}/.      {results[11]}
{color[1]}   /N{color[0]}MMMMMMMMNNNNmmmdddmNMNdso{color[1]}:\`        {results[12]}
{color[1]}  +M{color[0]}MMMMMMNNNNNmmmmdmNMNdso{color[1]}/-            {results[13]}
{color[1]}  yM{color[0]}MNNNNNNNmmmmmNNMmhs+/{color[1]}-\`             {results[14]}
{color[1]}  /h{color[0]}MMNNNNNNNNMNdhs++/{color[1]}-\`                {results[15]}
{color[1]}  \`/{color[0]}ohdmmddhys+++/:{color[1]}.\`                  {results[16]}
{color[1]}    \`-//////:--.                        {results[17]}
\x1b[0m""".strip()
    ),
    'ubuntu': UnixDistroInfo(
        fullname='Ubuntu Linux',
        package_list_cmd='dpkg -l',
        colors=['\x1b[1;37m', '\x1b[1;31m', '\x1b[1;33m'],
        logo="""{color[1]}
{color[1]}                           ./+o+-                 {results[0]}
{color[0]}                   yyyyy- {color[1]}-yyyyyy+      {results[1]}
{color[0]}                {color[0]}://+//////{color[1]}-yyyyyyo        {results[2]}
{color[2]}            .++ {color[0]}.:/++++++/-{color[1]}.+sss/\`       {results[3]}
{color[2]}          .:++o:  {color[0]}/++++++++/:--:/-            {results[4]}
{color[2]}         o:+o+:++.{color[0]}\`..\`\`\`.-/oo+++++/     {results[5]}
{color[2]}        .:+o:+o/.{color[0]}          \`+sssoo+/       {results[6]}
{color[0]}   .++/+:{color[2]}+oo+o:\`{color[0]}             /sssooo.      {results[7]}
{color[0]}  /+++//+:{color[2]}\`oo+o{color[0]}               /::--:.      {results[8]}
{color[0]}  \+/+o+++{color[2]}\`o++o{color[1]}               ++////.      {results[9]}
{color[0]}   .++.o+{color[2]}++oo+:\`{color[1]}             /dddhhh.      {results[10]}
{color[2]}        .+.o+oo:.{color[1]}          \`oddhhhh+       {results[11]}
{color[2]}         \+.++o+o\`{color[1]}\`-\`\`\`\`.:ohdhhhhh+   {results[12]}
{color[2]}          \`:o+++ {color[1]}\`ohhhhhhhhyo++os:        {results[13]}
{color[2]}            .o:{color[1]}\`.syhhhhhhh/{color[2]}.oo++o\`        {results[14]}
{color[1]}                /osyyyyyyo{color[2]}++ooo+++/         {results[15]}
{color[1]}                    \`\`\`\`\` {color[2]}+oo+++o\:    {results[16]}
{color[2]}                           \`oo++.          {results[17]}
\x1b[0m"""
    ),
    'linuxmint': UnixDistroInfo(
        fullname='Mint Linux',
        package_list_cmd='dpkg -l',
        colors=['\x1b[1;37m', '\x1b[1;32m'],
        logo="""{color[1]}
{color[1]} MMMMMMMMMMMMMMMMMMMMMMMMMmds+.       {results[0]}
{color[1]} MMm----::-://////////////oymNMd+\`    {results[1]}
{color[1]} MMd      {color[0]}/++                {color[1]}-sNMd:      {results[2]}
{color[1]} MMNso/\`  {color[0]}dMM    \`.::-. .-::.\` {color[1]}.hMN:     {results[3]}
{color[1]} ddddMMh  {color[0]}dMM   :hNMNMNhNMNMNh: {color[1]}\`NMm       {results[4]}
{color[1]}     NMm  {color[0]}dMM  .NMN/-+MMM+-/NMN\` {color[1]}dMM       {results[5]}
{color[1]}     NMm  {color[0]}dMM  -MMm  \`MMM   dMM. {color[1]}dMM       {results[6]}
{color[1]}     NMm  {color[0]}dMM  -MMm  \`MMM   dMM. {color[1]}dMM       {results[7]}
{color[1]}     NMm  {color[0]}dMM  .mmd  \`mmm   yMM. {color[1]}dMM       {results[8]}
{color[1]}     NMm  {color[0]}dMM\`  ..\`   ...   ydm. {color[1]}dMM      {results[9]}
{color[1]}     hMM- {color[0]}+MMd/-------...-:sdds  {color[1]}dMM        {results[10]}
{color[1]}     -NMm- {color[0]}:hNMNNNmdddddddddy/\`  {color[1]}dMM       {results[11]}
{color[1]}      -dMNs-{color[0]}\`\`-::::-------.\`\`    {color[1]}dMM    {results[12]}
{color[1]}       \`/dMNmy+/:-------------:/yMMM       {results[13]}
{color[1]}          ./ydNMMMMMMMMMMMMMMMMMMMMM        {results[14]}
{color[1]}             \.MMMMMMMMMMMMMMMMMMM          {results[15]}
{color[1]}                                            {results[16]}
\x1b[0m"""
    ),
    'kali': UnixDistroInfo(
        fullname='Kali Linux',
        package_list_cmd='dpkg -l',
        colors=['\x1b[1;34m', '\x1b[1;30m'],
        logo="""{color[0]}
        {color[0]}            ..,;:ccc,.                            {results[0]}
{color[0]}          ......''';lxO.                         {results[1]}
{color[0]}.....''''..........,:ld;                         {results[2]}
{color[0]}           .';;;:::;,,.x,                        {results[3]}
{color[0]}      ..'''.            0Xxoc:,.  ...            {results[4]}
{color[0]}  ....                ,ONkc;,;cokOdc',.          {results[5]}
{color[0]} .                   OMo           ':{color[1]}dd{color[0]}o.        {results[6]}
{color[0]}                    dMc               :OO;       {results[7]}
{color[0]}                    0M.                 .:o.     {results[8]}
{color[0]}                    ;Wd                          {results[9]}
{color[0]}                     ;XO,                        {results[10]}
{color[0]}                       ,d0Odlc;,..               {results[11]}
{color[0]}                           ..',;:cdOOd::,.       {results[12]}
{color[0]}                                    .:d;.':;.    {results[13]}
{color[0]}                                       'd,  .'   {results[14]}
{color[0]}                                         ;l   .. {results[15]}
{color[0]}                                          .o     {results[16]}
{color[0]}                                            c    {results[17]}
\x1b[0m""".strip()
    ),
    'android': AndroidDistroInfo(
        fullname='Android',
        package_list_cmd='apt list --installed',
        colors=['\x1b[0;0m', '\x1b[1;32m'],
        logo="""{color[1]}
{color[1]}       ╲ ▁▂▂▂▁ ╱         {results[0]}
{color[1]}       ▄███████▄         {results[1]}
{color[1]}      ▄██{color[0]} {color[1]}███{color[0]} {color[1]}██▄        {results[2]}
{color[1]}     ▄███████████▄       {results[3]}
{color[1]}  ▄█ ▄▄▄▄▄▄▄▄▄▄▄▄▄ █▄    {results[4]}
{color[1]}  ██ █████████████ ██    {results[5]}
{color[1]}  ██ █████████████ ██    {results[6]}
{color[1]}  ██ █████████████ ██    {results[7]}
{color[1]}  ██ █████████████ ██    {results[8]}
{color[1]}     █████████████       {results[9]}
{color[1]}      ███████████        {results[10]}
{color[1]}       ██     ██         {results[11]}
{color[1]}       ██     ██         {results[12]}
\x1b[0m""".strip()
    ),
    'osx': MacDistroInfo(
        fullname='Mac OS X',
        package_list_cmd='brew list -l',
        colors=['\x1b[1;37m', '\x1b[1;37m', '\x1b[1;33m'],
        logo="""{color[1]}
{color[1]}                :++++.           {results[0]}
{color[1]}               /+++/.            {results[1]}
{color[1]}       .:-::- .+/:-\`\`.::-      {results[2]}
{color[1]}    .:/++++++/::::/++++++/:\`    {results[3]}
{color[1]}  .:///////////////////////:\`   {results[4]}
{color[1]}  ////////////////////////\`     {results[5]}
{color[1]} -+++++++++++++++++++++++\`      {results[6]}
{color[1]} /++++++++++++++++++++++/        {results[7]}
{color[1]} /sssssssssssssssssssssss.       {results[8]}
{color[1]} :ssssssssssssssssssssssss-      {results[9]}
{color[1]}  osssssssssssssssssssssssso/\`  {results[10]}
{color[1]}  \`syyyyyyyyyyyyyyyyyyyyyyyy+\` {results[11]}
{color[1]}   \`ossssssssssssssssssssss/    {results[12]}
{color[1]}     :ooooooooooooooooooo+.      {results[13]}
{color[1]}      \`:+oo+/:-..-:/+o+/-       {results[14]}
\x1b[0m""".strip()
    ),
    'other': UnixDistroInfo(
        fullname='Unknown Linux',
        package_list_cmd=None,
        colors=['\x1b[1;37m', '\x1b[1;30m', '\x1b[1;33m'],
        logo="""{color[1]}                            {results[0]}
{color[1]}         #####              {results[1]}
{color[1]}        #######             {results[2]}
{color[1]}        ##{color[0]}O{color[1]}#{color[0]}O{color[1]}##             {results[3]}
{color[1]}        #{color[2]}#####{color[1]}#             {results[4]}
{color[1]}      ##{color[0]}##{color[2]}###{color[0]}##{color[1]}##           {results[5]}
{color[1]}     #{color[0]}##########{color[1]}##          {results[6]}
{color[1]}    #{color[0]}############{color[1]}##         {results[7]}
{color[1]}    #{color[0]}############{color[1]}###        {results[8]}
{color[2]}   ##{color[1]}#{color[0]}###########{color[1]}##{color[2]}#        {results[9]}
{color[2]} ######{color[1]}#{color[0]}#######{color[1]}#{color[2]}######      {results[10]}
{color[2]} #######{color[1]}#{color[0]}#####{color[1]}#{color[2]}#######      {results[11]}
{color[2]}   #####{color[1]}#######{color[2]}#####        {results[12]}
\x1b[0m""".strip()
    )
}


def distro_detect():

    kernel_type = sys.platform.lower()

    if kernel_type.startswith('linux'):
        distro = getattr(platform, 'linux_distribution')()[0].split(' ')[0].lower()
        if distro not in DISTROS:
            if 'android' in DistroInfo.process('uname -o').lower():
                distro = 'android'
            else:
                distro = 'other'

    elif kernel_type.startswith('darwin'):
        distro = 'osx'

    elif kernel_type.startswith('win') or kernel_type.startswith('cygwin'):
        distro = 'windows'

    else:
        sys.stderr.write('Unsupported OS!\n')
        sys.exit(1)

    return distro


def main():
    distro = DISTROS[distro_detect()]
    print(distro.format_output())

if __name__ == '__main__':
    main()

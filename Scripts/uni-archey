#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Archey [version 0.5.0]
#
# Archey is a simple system information tool written in Python.
#
# Copyright 2010 Melik Manukyan <melik@archlinux.us>
# Copyright 2010 David Vazgenovich Shakaryan <dvshakaryan@gmail.com>
# Copyright 2015 Štefan "Morzeux" Šmihla <morzeux@gmail.com>
#
# ASCII art by Brett Bohnenkamper <kittykatt@silverirc.com>
# Changes Jerome Launay <jerome@projet-libre.org>
# Fedora support by YeOK <yeok@henpen.org>
#
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.

# Import libraries

import os
import platform
import sys
import subprocess
import re
from subprocess import Popen, PIPE
from getpass import getuser


ENCODING = sys.getdefaultencoding()
LINESEP = os.linesep

# Python 3 compatibility
if sys.version_info >= (3, 0):
    unicode = str

# ---------------Output---------------#

output = [
    'User',
    'Hostname',
    'Distro',
    'Kernel',
    'Uptime',
    'WindowManager',
    'DesktopEnvironment',
    'Shell',
    'Terminal',
    'Packages',
    'CPU',
    'RAM',
    'Disk'
]
 
# ---------------Dictionaries---------------#

colorDict = {
    'Ubuntu': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[0;33m'],
    'Debian': ['\x1b[0;31m', '\x1b[1;31m'],
    'Mint': ['\x1b[0;32m', '\x1b[1;37m'],
    'Crunchbang': ['\x1b[1;37m'],
    'Fedora': ['\x1b[0;34m', '\x1b[1;37m'],
    'Sensors': ['\x1b[0;31m', '\x1b[0;32m', '\x1b[0;33m'],
    'Clear': ['\x1b[0m']
    }


class DistroInfo(object):

    __desktop_env_map__ = {
        'cinnamon-sessio': 'Cinnamon',
        'gnome-session': 'GNOME',
        'mate-session': 'MATE',
        'ksmserver': 'KDE',
        'xfce4-session': 'Xfce',
        'lxsession': 'LXDE'
    }

    __window_manager_map__ = {
        'awesome': 'Awesome',
        'beryl': 'Beryl',
        'blackbox': 'Blackbox',
        'bspwm': 'bspwm',
        'compiz': 'Compiz',
        'dwm': 'DWM',
        'enlightenment': 'Enlightenment',
        'herbstluftwm': 'herbstluftwm',
        'fluxbox': 'Fluxbox',
        'fvwm': 'FVWM',
        'i3': 'i3',
        'icewm': 'IceWM',
        'kwin': 'KWin',
        'metacity': 'Metacity',
        'musca': 'Musca',
        'nemo': 'Nemo',
        'openbox': 'Openbox',
        'pekwm': 'PekWM',
        'ratpoison': 'ratpoison',
        'scrotwm': 'ScrotWM',
        'wmaker': 'Window Maker',
        'wmfs': 'Wmfs',
        'wmii': 'wmii',
        'xfwm4': 'Xfwm',
        'xmonad': 'xmonad'
    }

    __output_order__ = (
        'user',
        'hostname',
        'distro',
        'kernel',
        'uptime',
        'window_manager',
        'desktop_environment',
        'shell',
        'terminal',
        'packages',
        'cpu',
        'ram',
        'disk'
    )

    def format_output(self):
        results = []
        results.extend([''] * (self._logo_lines_count - len(self.__output_order__)))

        for prop in self.__output_order__:
            key, value = getattr(self, prop)

            results.append('%s%s: %s%s' % (
                self.colors[-1],
                key,
                colorDict['Clear'][0],
                value
            ))

        return self.logo.format(color=self.colors, results=results)

    @property
    def _logo_lines_count(self):
        return len(self.logo.strip().split('\n')) - 2

    @staticmethod
    def _process(command):
        return Popen(command, stdout=PIPE, stderr=PIPE, shell=True).communicate()

    @property
    def logo(self):
        raise NotImplementedError()

    @property
    def colors(self):
        raise NotImplementedError()

    @property
    def user(self):
        return 'User', getuser()

    @property
    def hostname(self):
        return 'Hostname', platform.node()

    @property
    def distro(self):
        raise NotImplementedError()

    @property
    def kernel(self):
        raise NotImplementedError()

    @property
    def uptime(self):
        raise NotImplementedError()

    @property
    def window_manager(self):
        raise NotImplementedError()

    @property
    def desktop_environment(self):
        raise NotImplementedError()

    @property
    def shell(self):
        raise NotImplementedError()

    @property
    def terminal(self):
        raise NotImplementedError()

    @property
    def packages(self):
        raise NotImplementedError()

    @property
    def cpu(self):
        raise NotImplementedError()

    @property
    def ram(self):
        raise NotImplementedError()

    @property
    def disk(self):
        raise NotImplementedError()


class UnixDistroInfo(DistroInfo):

    def __init__(self, fullname, package_list_cmd, colors, logo):
        self._fullname = fullname
        self._package_list_cmd = package_list_cmd
        self._colors = colors
        self._logo = logo
        self._sys_encoding = sys.getdefaultencoding()
        self._process_list = set(unicode(subprocess.check_output(
            ['ps', '-u', getuser(), '-o', 'comm']
        ), encoding='utf8').rstrip(LINESEP).split(LINESEP))

    @property
    def logo(self):
        return self._logo

    @property
    def colors(self):
        return self._colors

    @property
    def distro(self):
        return 'Distro', self._fullname

    @property
    def kernel(self):
        return 'Kernel', self._process('uname -r')[0].decode(ENCODING).rstrip(LINESEP)

    @property
    def uptime(self):
        with open('/proc/uptime') as fr:
            f_up_time = int(fr.read().split('.')[0])

        day = int(f_up_time / 86400)
        f_up_time %= 86400
        hour = int(f_up_time / 3600)
        f_up_time %= 3600
        minute = int(f_up_time / 60)
        up_time = ''
        if day == 1:
            up_time += '%d day, ' % day
        if day > 1:
            up_time += '%d days, ' % day
        up_time += '%d:%02d' % (hour, minute)
        return 'Uptime', up_time

    @property
    def window_manager(self):
        window_manager = ''
        for key in self.__window_manager_map__.keys():
            if key in self._process_list:
                window_manager = self.__window_manager_map__[key]
                break

        return 'Window Manager', window_manager

    @property
    def desktop_environment(self):
        desktop_env = ''
        for key in self.__desktop_env_map__.keys():
            if key in self._process_list:
                desktop_env = self.__desktop_env_map__[key]
                break

        return 'Desktop Environment', desktop_env

    @property
    def shell(self):
        return 'Shell', os.getenv('SHELL')

    @property
    def terminal(self):
        return 'Terminal', os.getenv('TERM')

    @property
    def packages(self):
        if self._package_list_cmd is not None:
            p1 = self._process(self._package_list_cmd
            )[0].decode(ENCODING)

            packages = len(p1.rstrip(LINESEP).split(LINESEP))
        else:
            packages = 'Unknown'

        return 'Packages', packages

    @property
    def cpu(self):
        with open('/proc/cpuinfo') as fr:
            file = fr.readlines()
        return 'CPU', re.sub('  +', ' ', file[4].replace('model name\t: ', '').rstrip(LINESEP))

    @property
    def ram(self):
        raminfo = self._process('free -m')[0].decode(ENCODING).split(LINESEP)
        ram = ''.join(filter(re.compile('M').search, raminfo)).split()
        used = ram[2]
        total = ram[1]
        used_percent = ((float(used) / float(total)) * 100)
        if used_percent <= 33:
            ram_display = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], total)

        if 33 < used_percent < 67:
            ram_display = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], total)

        if used_percent >= 67:
            ram_display = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], total)

        return 'RAM', ram_display

    @property
    def disk(self):
        process_result = self._process("""
            df -Tlh -B GB --total
            -t ext4
            -t ext3
            -t ext2
            -t reiserfs
            -t jfs
            -t ntfs
            -t fat32
            -t btrfs
            -t fuseblk
            -t xfs
        """)[0].decode(ENCODING)

        total = process_result.splitlines()[-1].split()
        used = total[3]
        size = total[2]
        used_percent = float(total[5][:-1])

        if used_percent <= 33:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], size)

        if 33 < used_percent < 67:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], size)

        if used_percent >= 67:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], size)

        return 'Disk', disk


class WindowsDistroInfo(DistroInfo):
    def __init__(self, package_list_cmd, colors, logo):
        self._package_list_cmd = package_list_cmd
        self._colors = colors
        self._logo = logo

    @property
    def fullname(self):
        if self.is_cygwin:
            return 'Cygwin %s' % os.uname()[2]
        else:
            release, build, service_pack, _ = platform.win32_ver()
            return 'MS Windows %s %s' % (release, service_pack)

    @property
    def is_cygwin(self):
        return sys.platform == 'cygwin'

    @property
    def kernel(self):
        if self.is_cygwin:
            return platform.system()
        else:
            return 'Windows %s' % platform.win32_ver()[1]


DISTROS = {
    'windows': WindowsDistroInfo(
        package_list_cmd='choco list -li',
        colors=['\x1b[0;34m', '\x1b[1;34m'],
        logo="""{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`     {results[13]}
{color[0]}   ######'           '######    {results[14]}
{color[0]}  ;####                 ####;   {results[15]}
{color[0]}  ##'                     '##   {results[16]}
{color[0]} #'                         `#  {results[17]}
\x1b[0m""".strip()
    ),
    'arch': UnixDistroInfo(
        fullname='Arch Linux',
        package_list_cmd='pacman -Q',
        colors=['\x1b[0;34m', '\x1b[1;34m'],
        logo="""{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`     {results[13]}
{color[0]}   ######'           '######    {results[14]}
{color[0]}  ;####                 ####;   {results[15]}
{color[0]}  ##'                     '##   {results[16]}
{color[0]} #'                         `#  {results[17]}
\x1b[0m""".strip()
    ),
    'gentoo': UnixDistroInfo(
        fullname='Gentoo Linux',
        package_list_cmd='ls -d /var/db/pkg/*/*| cut -f5- -d/',
        colors=['\x1b[1;37m', '\x1b[1;35m'],
        logo="""{color[1]}
{color[1]}           -/oyddmdhs+:.              {results[0]}
{color[1]}       -o{color[0]}dNMMMMMMMMNNmhy+{color[1]}-\`               {results[1]}
{color[1]}     -y{color[0]}NMMMMMMMMMMMNNNmmdhy{color[1]}+-             {results[2]}
{color[1]}   \`o{color[0]}mMMMMMMMMMMMMNmdmmmmddhhy{color[1]}/\`          {results[3]}
{color[1]}   om{color[0]}MMMMMMMMMMMN{color[1]}oooooo{color[0]}hmdddhhhd{color[1]}o\`      {results[4]}
{color[1]}  .y{color[0]}dMMMMMMMMMMd{color[1]}ooommooo{color[0]}mdddhhhhdm{color[1]}+\`    {results[5]}
{color[1]}   oy{color[0]}hdmNMMMMMMMN{color[1]}ooooo{color[0]}dmddddhhhhyhN{color[1]}d.    {results[6]}
{color[1]}    :o{color[0]}yhhdNNMMMMMMMNNNmmdddhhhhhyym{color[1]}Mh    {results[7]}
{color[1]}      .:{color[0]}+sydNMMMMMNNNmmmdddhhhhhhmM{color[1]}my    {results[8]}
{color[1]}         /m{color[0]}MMMMMMNNNmmmdddhhhhhmMNh{color[1]}s:    {results[9]}
{color[1]}      \`o{color[0]}NMMMMMMMNNNmmmddddhhdmMNhs{color[1]}+\`   {results[10]}
{color[1]}    \`s{color[0]}NMMMMMMMMNNNmmmdddddmNMmhs{color[1]}/.      {results[11]}
{color[1]}   /N{color[0]}MMMMMMMMNNNNmmmdddmNMNdso{color[1]}:\`        {results[12]}
{color[1]}  +M{color[0]}MMMMMMNNNNNmmmmdmNMNdso{color[1]}/-            {results[13]}
{color[1]}  yM{color[0]}MNNNNNNNmmmmmNNMmhs+/{color[1]}-\`             {results[14]}
{color[1]}  /h{color[0]}MMNNNNNNNNMNdhs++/{color[1]}-\`                {results[15]}
{color[1]}  \`/{color[0]}ohdmmddhys+++/:{color[1]}.\`                  {results[16]}
{color[1]}    \`-//////:--.                        {results[17]})
\x1b[0m""".strip()
    ),
    'ubuntu': UnixDistroInfo(
        fullname='Ubuntu Linux',
        package_list_cmd='dpkg -l',
        colors=['\x1b[1;37m', '\x1b[1;31m', '\x1b[1;33m'],
        logo="""{color[1]}
{color[1]}                           ./+o+-                 {results[0]}
{color[0]}                   yyyyy- {color[1]}-yyyyyy+      {results[1]}
{color[0]}                {color[0]}://+//////{color[1]}-yyyyyyo        {results[2]}
{color[2]}            .++ {color[0]}.:/++++++/-{color[1]}.+sss/\`       {results[3]}
{color[2]}          .:++o:  {color[0]}/++++++++/:--:/-            {results[4]}
{color[2]}         o:+o+:++.{color[0]}\`..\`\`\`.-/oo+++++/     {results[5]}
{color[2]}        .:+o:+o/.{color[0]}          \`+sssoo+/       {results[6]}
{color[0]}   .++/+:{color[2]}+oo+o:\`{color[0]}             /sssooo.      {results[7]}
{color[0]}  /+++//+:{color[2]}\`oo+o{color[0]}               /::--:.      {results[8]}
{color[0]}  \+/+o+++{color[2]}\`o++o{color[1]}               ++////.      {results[9]}
{color[0]}   .++.o+{color[2]}++oo+:\`{color[1]}             /dddhhh.      {results[10]}
{color[2]}        .+.o+oo:.{color[1]}          \`oddhhhh+       {results[11]}
{color[2]}         \+.++o+o\`{color[1]}\`-\`\`\`\`.:ohdhhhhh+   {results[12]}
{color[2]}          \`:o+++ {color[1]}\`ohhhhhhhhyo++os:        {results[13]}
{color[2]}            .o:{color[1]}\`.syhhhhhhh/{color[2]}.oo++o\`        {results[14]}
{color[1]}                /osyyyyyyo{color[2]}++ooo+++/         {results[15]}
{color[1]}                    \`\`\`\`\` {color[2]}+oo+++o\:    {results[16]}
{color[2]}                           \`oo++.          {results[17]}
\x1b[0m"""
    ),
    'other': UnixDistroInfo(
        fullname='Unknown Linux',
        package_list_cmd=None,
        colors=['\x1b[1;37m', '\x1b[1;30m', '\x1b[1;33m'],
        logo="""{color[1]}                            {results[0]}
{color[1]}         #####              {results[1]}
{color[1]}        #######             {results[2]}
{color[1]}        ##{color[0]}O{color[1]}#{color[0]}O{color[1]}##             {results[3]}
{color[1]}        #{color[2]}#####{color[1]}#             {results[4]}
{color[1]}      ##{color[0]}##{color[2]}###{color[0]}##{color[1]}##           {results[5]}
{color[1]}     #{color[0]}##########{color[1]}##          {results[6]}
{color[1]}    #{color[0]}############{color[1]}##         {results[7]}
{color[1]}    #{color[0]}############{color[1]}###        {results[8]}
{color[2]}   ##{color[1]}#{color[0]}###########{color[1]}##{color[2]}#        {results[9]}
{color[2]} ######{color[1]}#{color[0]}#######{color[1]}#{color[2]}######      {results[10]}
{color[2]} #######{color[1]}#{color[0]}#####{color[1]}#{color[2]}#######      {results[11]}
{color[2]}   #####{color[1]}#######{color[2]}#####        {results[12]}
\x1b[0m""".strip()
    )
}


def distro_detect():

    if sys.platform == 'linux':
        distro = getattr(platform, 'linux_distribution')()[0].split(' ')[0].lower()
        if distro not in DISTROS:
            distro = 'other'

    elif sys.platform == 'darwin':
        distro = 'osx'

    elif sys.platform.startswith('win') or sys.platform == 'cygwin':
        distro = 'windows'

    else:
        sys.stderr.write('Unsupported OS!\n')
        sys.exit(1)

    return distro


def main():
    distro = DISTROS[distro_detect()]
    print(distro.format_output())

if __name__ == '__main__':
    main()
